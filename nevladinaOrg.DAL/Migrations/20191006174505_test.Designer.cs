// <auto-generated />
using System;
using DAL.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.Migrations
{
    [DbContext(typeof(NevladinaOrgContext))]
    [Migration("20191006174505_test")]
    partial class test
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Core.Entities.Base.AcademicDegree", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("AcademicDegrees");
                });

            modelBuilder.Entity("Core.Entities.Base.AcademicTitle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("AcademicTitles");
                });

            modelBuilder.Entity("Core.Entities.Base.ActivityLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionMethod")
                        .HasMaxLength(50);

                    b.Property<string>("ActiveUrl")
                        .HasMaxLength(200);

                    b.Property<int>("ActivityId");

                    b.Property<string>("Controller")
                        .HasMaxLength(50);

                    b.Property<string>("ExceptionMessage")
                        .HasMaxLength(500);

                    b.Property<string>("ExceptionType")
                        .HasMaxLength(100);

                    b.Property<int?>("InstitutionId");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(50);

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("LogActivityId");

                    b.Property<DateTime>("OccurredAt");

                    b.Property<int?>("OrganizationId");

                    b.Property<string>("ReferrerUrl")
                        .HasMaxLength(200);

                    b.Property<int?>("RowId");

                    b.Property<string>("StackTrace");

                    b.Property<string>("TableName")
                        .HasMaxLength(50);

                    b.Property<int?>("UserId");

                    b.Property<string>("WebBrowser")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("LogActivityId");

                    b.ToTable("ActivityLogs");
                });

            modelBuilder.Entity("Core.Entities.Base.Announcement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int?>("AnnouncementTypeId")
                        .IsRequired();

                    b.Property<string>("Content")
                        .IsRequired();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int?>("InstitutionId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int?>("OrganizationId");

                    b.Property<string>("Subtitle")
                        .HasMaxLength(80);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.Property<int?>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("AnnouncementTypeId");

                    b.ToTable("Announcements");
                });

            modelBuilder.Entity("Core.Entities.Base.AnnouncementDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AnnouncementId");

                    b.Property<byte[]>("Document")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<long>("Size");

                    b.Property<Guid>("StreamId");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("AnnouncementId");

                    b.ToTable("AnnouncementDocuments");
                });

            modelBuilder.Entity("Core.Entities.Base.AnnouncementOrganization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AnnouncementId");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("OrganizationId");

                    b.HasKey("Id");

                    b.HasIndex("AnnouncementId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("AnnouncementOrganizations");
                });

            modelBuilder.Entity("Core.Entities.Base.AnnouncementPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AnnouncementId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<byte[]>("Photo")
                        .IsRequired();

                    b.Property<long>("Size");

                    b.Property<Guid>("StreamId");

                    b.Property<byte[]>("Thumbnail");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("AnnouncementId");

                    b.ToTable("AnnouncementPhotos");
                });

            modelBuilder.Entity("Core.Entities.Base.AnnouncementType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Icon");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("AnnouncementType");
                });

            modelBuilder.Entity("Core.Entities.Base.AnnouncementUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AnnouncementId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("OccurredAt");

                    b.Property<bool>("Seen");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("AnnouncementId");

                    b.HasIndex("UserId");

                    b.ToTable("AnnouncementUsers");
                });

            modelBuilder.Entity("Core.Entities.Base.Citizenship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Citizenships");
                });

            modelBuilder.Entity("Core.Entities.Base.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20);

                    b.Property<int?>("RegionId");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("RegionId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Core.Entities.Base.ContactType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Icon");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("ContactTypes");
                });

            modelBuilder.Entity("Core.Entities.Base.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Core.Entities.Base.EmployeeStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("EmployeeStatuses");
                });

            modelBuilder.Entity("Core.Entities.Base.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId");

                    b.Property<int>("CountryId");

                    b.Property<DateTime?>("DateFrom")
                        .IsRequired();

                    b.Property<DateTime?>("DateTo");

                    b.Property<string>("Description");

                    b.Property<int>("InstitutionOrganizerId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Latitude");

                    b.Property<string>("Longitude");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("OrganizationOrganizerId");

                    b.Property<string>("Place");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("InstitutionOrganizerId");

                    b.HasIndex("OrganizationOrganizerId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Core.Entities.Base.EventDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<byte[]>("Document")
                        .IsRequired();

                    b.Property<int>("EventId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<long>("Size");

                    b.Property<Guid>("StreamId");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventDocuments");
                });

            modelBuilder.Entity("Core.Entities.Base.EventImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EventId");

                    b.Property<byte[]>("Image")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<long>("Size");

                    b.Property<Guid>("StreamId");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventImages");
                });

            modelBuilder.Entity("Core.Entities.Base.EventItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConferenceRoom");

                    b.Property<DateTime?>("EndTime");

                    b.Property<int>("EventId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<DateTime?>("StartTime");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventItems");
                });

            modelBuilder.Entity("Core.Entities.Base.EventItemEventType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EventItemId");

                    b.Property<int>("EventItemTypeId");

                    b.Property<bool>("IsDeleted");

                    b.HasKey("Id");

                    b.HasIndex("EventItemId");

                    b.HasIndex("EventItemTypeId");

                    b.ToTable("EventItemEventTypes");
                });

            modelBuilder.Entity("Core.Entities.Base.EventItemType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("InstitutionId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("InstitutionId");

                    b.ToTable("EventItemTypes");
                });

            modelBuilder.Entity("Core.Entities.Base.EventRegistration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOfRegistration");

                    b.Property<int>("EventId");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("Paid");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("EventRegistrations");
                });

            modelBuilder.Entity("Core.Entities.Base.EventSponsor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EventId");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("SponsorId");

                    b.Property<int>("SponsorTypeId");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("SponsorId");

                    b.HasIndex("SponsorTypeId");

                    b.ToTable("EventSponsors");
                });

            modelBuilder.Entity("Core.Entities.Base.EventUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EventId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("OccurredAt")
                        .IsRequired();

                    b.Property<bool>("Seen");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("EventUsers");
                });

            modelBuilder.Entity("Core.Entities.Base.Functionality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ControllerName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("FunctionNumber");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Functionalities");
                });

            modelBuilder.Entity("Core.Entities.Base.Institution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("AdditionalInformation");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("CityId");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<int>("CountryId");

                    b.Property<int>("InstitutionTypeId");

                    b.Property<bool>("IsDeleted");

                    b.Property<byte[]>("Logo");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int?>("ParentId");

                    b.Property<string>("SocialURL");

                    b.Property<string>("WebsiteURL");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("InstitutionTypeId");

                    b.HasIndex("ParentId");

                    b.ToTable("Institutions");
                });

            modelBuilder.Entity("Core.Entities.Base.InstitutionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("InstitutionTypes");
                });

            modelBuilder.Entity("Core.Entities.Base.InstitutionUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int>("InstitutionId");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsInstitutionUser");

                    b.Property<bool>("IsOrganizationUser");

                    b.Property<DateTime?>("LastLogin");

                    b.Property<Guid>("Token");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("UserId");

                    b.ToTable("InstitutionUsers");
                });

            modelBuilder.Entity("Core.Entities.Base.Lecture", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("AboutLecture");

                    b.Property<bool>("IsDeleted");

                    b.HasKey("Id");

                    b.ToTable("Lectures");
                });

            modelBuilder.Entity("Core.Entities.Base.LectureLecturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("LectureId");

                    b.Property<int>("LecturerId");

                    b.HasKey("Id");

                    b.HasIndex("LectureId");

                    b.HasIndex("LecturerId");

                    b.ToTable("LectureLecturers");
                });

            modelBuilder.Entity("Core.Entities.Base.Lecturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Biography");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Lecturers");
                });

            modelBuilder.Entity("Core.Entities.Base.LicensePeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired();

                    b.Property<DateTime?>("EndDate")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("LicenseTypeId");

                    b.Property<int>("MemberLicenseId");

                    b.HasKey("Id");

                    b.HasIndex("LicenseTypeId");

                    b.HasIndex("MemberLicenseId");

                    b.ToTable("LicensePeriods");
                });

            modelBuilder.Entity("Core.Entities.Base.LicenseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("LicenseTypes");
                });

            modelBuilder.Entity("Core.Entities.Base.LogActivity", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("LogActivities");
                });

            modelBuilder.Entity("Core.Entities.Base.MaritalStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("MaritalStatuses");
                });

            modelBuilder.Entity("Core.Entities.Base.Member", b =>
                {
                    b.Property<int>("Id");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Note");

                    b.HasKey("Id");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("Core.Entities.Base.MemberEmployement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("CompanyName");

                    b.Property<DateTime?>("DateFrom")
                        .IsRequired();

                    b.Property<DateTime?>("DateTo")
                        .IsRequired();

                    b.Property<int?>("InstitutionId");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("MemberId");

                    b.Property<int?>("OrganizationId");

                    b.Property<string>("Position");

                    b.HasKey("Id");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("MemberId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("MemberEmployements");
                });

            modelBuilder.Entity("Core.Entities.Base.MemberLicense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LicenceNumber")
                        .IsRequired();

                    b.Property<int>("MemberId");

                    b.Property<bool>("Permanent");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.ToTable("MemberLicenses");
                });

            modelBuilder.Entity("Core.Entities.Base.Nationality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Nationalities");
                });

            modelBuilder.Entity("Core.Entities.Base.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("AdditionalInformation");

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<int>("CityId");

                    b.Property<int>("CountryId");

                    b.Property<int?>("InstitutionId");

                    b.Property<bool>("IsDeleted");

                    b.Property<byte[]>("Logo");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("OrganizationTypeId");

                    b.Property<int?>("ParentId");

                    b.Property<string>("ParentPath");

                    b.Property<string>("Place");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("OrganizationTypeId");

                    b.HasIndex("ParentId");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("Core.Entities.Base.OrganizationInstitutionUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<bool>("Employed");

                    b.Property<int>("InstitutionUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastLogin");

                    b.Property<int>("OrganizationId");

                    b.Property<Guid>("Token");

                    b.HasKey("Id");

                    b.HasIndex("InstitutionUserId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationInstitutionUsers");
                });

            modelBuilder.Entity("Core.Entities.Base.OrganizationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("OrganizationTypes");
                });

            modelBuilder.Entity("Core.Entities.Base.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount");

                    b.Property<DateTime>("DateOfPayment");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("RegistrationId");

                    b.HasKey("Id");

                    b.HasIndex("RegistrationId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Core.Entities.Base.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<int?>("BirthCityId");

                    b.Property<int?>("BirthCountryId");

                    b.Property<int?>("CitizenshipId");

                    b.Property<int?>("CityId");

                    b.Property<int?>("CountryId");

                    b.Property<DateTime?>("DateOfBirth")
                        .IsRequired();

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Gender")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("NationalIDNumber");

                    b.Property<string>("ParentName")
                        .HasMaxLength(100);

                    b.Property<string>("Place");

                    b.Property<int?>("RegionId");

                    b.Property<string>("ResidenceAddress");

                    b.Property<int?>("ResidenceId");

                    b.Property<string>("SocialSecurityNumber");

                    b.HasKey("Id");

                    b.HasIndex("BirthCityId");

                    b.HasIndex("BirthCountryId");

                    b.HasIndex("CitizenshipId");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("RegionId");

                    b.HasIndex("ResidenceId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("Core.Entities.Base.PersonContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Contact")
                        .IsRequired();

                    b.Property<int>("ContactTypeId");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("PersonId");

                    b.Property<bool>("Primary");

                    b.HasKey("Id");

                    b.HasIndex("ContactTypeId");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonContacts");
                });

            modelBuilder.Entity("Core.Entities.Base.PersonDetail", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("AcademicDegreeId");

                    b.Property<int?>("AcademicTitleId");

                    b.Property<int?>("EmploymentStatusId");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("MartialStatusId");

                    b.HasKey("Id");

                    b.HasIndex("AcademicDegreeId");

                    b.HasIndex("AcademicTitleId");

                    b.HasIndex("EmploymentStatusId");

                    b.HasIndex("MartialStatusId");

                    b.ToTable("PersonDetails");
                });

            modelBuilder.Entity("Core.Entities.Base.PersonPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<int>("PersonId");

                    b.Property<byte[]>("Photo")
                        .IsRequired();

                    b.Property<long>("Size");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonPhotos");
                });

            modelBuilder.Entity("Core.Entities.Base.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("Core.Entities.Base.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Description");

                    b.Property<int?>("InstitutionId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("OrganizationId");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Core.Entities.Base.RoleFunctionality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AssignmentDate");

                    b.Property<int>("FunctionalityId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("FunctionalityId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleFunctionalities");
                });

            modelBuilder.Entity("Core.Entities.Base.Sponsor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<byte[]>("Logo");

                    b.Property<string>("Name");

                    b.Property<string>("WebUrl");

                    b.HasKey("Id");

                    b.ToTable("Sponsors");
                });

            modelBuilder.Entity("Core.Entities.Base.SponsorType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("SponsorTypes");
                });

            modelBuilder.Entity("Core.Entities.Base.User", b =>
                {
                    b.Property<int>("Id");

                    b.Property<bool>("ChangedPassword");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CultureName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Email");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Core.Entities.Base.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("InstitutionUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("OrganizationInstitutionUserId");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("InstitutionUserId");

                    b.HasIndex("OrganizationInstitutionUserId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Core.Entities.Base.ActivityLog", b =>
                {
                    b.HasOne("Core.Entities.Base.LogActivity", "LogActivity")
                        .WithMany()
                        .HasForeignKey("LogActivityId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.Base.Announcement", b =>
                {
                    b.HasOne("Core.Entities.Base.AnnouncementType", "AnnouncementType")
                        .WithMany()
                        .HasForeignKey("AnnouncementTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.Base.AnnouncementDocument", b =>
                {
                    b.HasOne("Core.Entities.Base.Announcement", "Announcement")
                        .WithMany()
                        .HasForeignKey("AnnouncementId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.Base.AnnouncementOrganization", b =>
                {
                    b.HasOne("Core.Entities.Base.Announcement", "Announcement")
                        .WithMany("AnnouncementsOrganizations")
                        .HasForeignKey("AnnouncementId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Base.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.Base.AnnouncementPhoto", b =>
                {
                    b.HasOne("Core.Entities.Base.Announcement", "Announcement")
                        .WithMany()
                        .HasForeignKey("AnnouncementId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.Base.AnnouncementUser", b =>
                {
                    b.HasOne("Core.Entities.Base.Announcement", "Announcement")
                        .WithMany()
                        .HasForeignKey("AnnouncementId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Base.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.Base.City", b =>
                {
                    b.HasOne("Core.Entities.Base.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Base.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.Base.Event", b =>
                {
                    b.HasOne("Core.Entities.Base.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Base.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Base.Institution", "Institution")
                        .WithMany()
                        .HasForeignKey("InstitutionOrganizerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Base.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationOrganizerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.Base.EventDocument", b =>
                {
                    b.HasOne("Core.Entities.Base.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.Base.EventImage", b =>
                {
                    b.HasOne("Core.Entities.Base.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.Base.EventItem", b =>
                {
                    b.HasOne("Core.Entities.Base.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.Base.EventItemEventType", b =>
                {
                    b.HasOne("Core.Entities.Base.EventItem", "EventItem")
                        .WithMany()
                        .HasForeignKey("EventItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Base.EventItemType", "EventItemType")
                        .WithMany()
                        .HasForeignKey("EventItemTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.Base.EventItemType", b =>
                {
                    b.HasOne("Core.Entities.Base.Institution", "Institution")
                        .WithMany()
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.Base.EventRegistration", b =>
                {
                    b.HasOne("Core.Entities.Base.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Base.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.Base.EventSponsor", b =>
                {
                    b.HasOne("Core.Entities.Base.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Base.Sponsor", "Sponsor")
                        .WithMany()
                        .HasForeignKey("SponsorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Base.SponsorType", "SponsorType")
                        .WithMany()
                        .HasForeignKey("SponsorTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.Base.EventUser", b =>
                {
                    b.HasOne("Core.Entities.Base.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Base.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.Base.Institution", b =>
                {
                    b.HasOne("Core.Entities.Base.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Base.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Base.InstitutionType", "InstitutionType")
                        .WithMany()
                        .HasForeignKey("InstitutionTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Base.Institution", "ParentInstitution")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.Base.InstitutionUser", b =>
                {
                    b.HasOne("Core.Entities.Base.Institution", "Institution")
                        .WithMany()
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Base.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.Base.Lecture", b =>
                {
                    b.HasOne("Core.Entities.Base.EventItem", "EventItem")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.Base.LectureLecturer", b =>
                {
                    b.HasOne("Core.Entities.Base.Lecture", "Lecture")
                        .WithMany()
                        .HasForeignKey("LectureId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Base.Lecturer", "Lecturer")
                        .WithMany()
                        .HasForeignKey("LecturerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.Base.Lecturer", b =>
                {
                    b.HasOne("Core.Entities.Base.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.Base.LicensePeriod", b =>
                {
                    b.HasOne("Core.Entities.Base.LicenseType", "LicenseType")
                        .WithMany()
                        .HasForeignKey("LicenseTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Base.MemberLicense", "MemberLicense")
                        .WithMany()
                        .HasForeignKey("MemberLicenseId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.Base.Member", b =>
                {
                    b.HasOne("Core.Entities.Base.OrganizationInstitutionUser", "OrganizationInstitutionUser")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.Base.MemberEmployement", b =>
                {
                    b.HasOne("Core.Entities.Base.Institution", "Institution")
                        .WithMany()
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Base.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Base.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.Base.MemberLicense", b =>
                {
                    b.HasOne("Core.Entities.Base.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.Base.Organization", b =>
                {
                    b.HasOne("Core.Entities.Base.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Base.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Base.Institution", "Institution")
                        .WithMany()
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Base.OrganizationType", "OrganizationType")
                        .WithMany()
                        .HasForeignKey("OrganizationTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Base.Organization", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.Base.OrganizationInstitutionUser", b =>
                {
                    b.HasOne("Core.Entities.Base.InstitutionUser", "InstitutionUser")
                        .WithMany()
                        .HasForeignKey("InstitutionUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Base.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.Base.Payment", b =>
                {
                    b.HasOne("Core.Entities.Base.EventRegistration", "EventRegistration")
                        .WithMany()
                        .HasForeignKey("RegistrationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.Base.Person", b =>
                {
                    b.HasOne("Core.Entities.Base.City", "BirthCity")
                        .WithMany()
                        .HasForeignKey("BirthCityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Base.Country", "BirthCountry")
                        .WithMany()
                        .HasForeignKey("BirthCountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Base.Citizenship", "Citizenship")
                        .WithMany()
                        .HasForeignKey("CitizenshipId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Base.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Base.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Base.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Base.City", "ResidenceCity")
                        .WithMany()
                        .HasForeignKey("ResidenceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.Base.PersonContact", b =>
                {
                    b.HasOne("Core.Entities.Base.ContactType", "ContactType")
                        .WithMany()
                        .HasForeignKey("ContactTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Base.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.Base.PersonDetail", b =>
                {
                    b.HasOne("Core.Entities.Base.AcademicDegree", "AcademicDegree")
                        .WithMany()
                        .HasForeignKey("AcademicDegreeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Base.AcademicTitle", "AcademicTitle")
                        .WithMany()
                        .HasForeignKey("AcademicTitleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Base.EmployeeStatus", "EmployeeStatus")
                        .WithMany()
                        .HasForeignKey("EmploymentStatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Base.Person", "Person")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Base.MaritalStatus", "MaritalStatus")
                        .WithMany()
                        .HasForeignKey("MartialStatusId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.Base.PersonPhoto", b =>
                {
                    b.HasOne("Core.Entities.Base.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.Base.Region", b =>
                {
                    b.HasOne("Core.Entities.Base.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.Base.RoleFunctionality", b =>
                {
                    b.HasOne("Core.Entities.Base.Functionality", "Functionality")
                        .WithMany()
                        .HasForeignKey("FunctionalityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Base.Role", "Role")
                        .WithMany("RoleFunctionalities")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.Base.User", b =>
                {
                    b.HasOne("Core.Entities.Base.Person", "Person")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.Base.UserRole", b =>
                {
                    b.HasOne("Core.Entities.Base.InstitutionUser", "InstitutionUser")
                        .WithMany()
                        .HasForeignKey("InstitutionUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Base.OrganizationInstitutionUser", "OrganizationInstitutionUser")
                        .WithMany()
                        .HasForeignKey("OrganizationInstitutionUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Base.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
